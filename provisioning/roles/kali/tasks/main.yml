---
- name: Set password on User debian
  ansible.builtin.user:
    name: debian
    password: "$y$j9T$r1LaddN0V6MPqFmZl5U7C/$4xbYJL5zi/YFU85SL/gXz5UXs3JAXV5dU5CUvTN/WN9"
    update_password: always
    
- name: Update apt repo cache
  apt:
    update_cache:
    cache_valid_time: 3600

#- name: Update all packages
#  apt:
#    name: "*"
#    state: latest

- name: Install packages (zap, nmap, gvm)
  apt:
    name: 
      - zaproxy
      - nmap
      - "gvm*"
#      - git
#      - python3-full
#      - python3-pip
#      - python3-venv
#      - build-essential
#      - libssl-dev
#      - libffi-dev
#      - python3-dev
#      - golang
#      - nodejs
#      - npm
#      - nano
#      - smbclient
#      - cifs-utils
#      - unzip
#      - rsync
#      - redis
#      - postgresql
    state: present
    install_recommends: yes
    update_cache: yes

- name: Install apt Packages (git, python, build-essentials)
  apt: 
    name: 
      - git
      - python3-full
      - python3-pip
      - python3-venv
      - python3-dev
      - build-essential
    state: present
    install_recommends: yes
    update_cache: yes

- name: Install apt Packages (libssl, goland, nodejs, npm, nano)
  apt: 
    name: 
      - libssl-dev
      - libffi-dev
      - golang
      - nodejs
      - npm
      - nano
    state: present
    install_recommends: yes
    update_cache: yes

- name: Install apt Packages (smbclient, cifs, unzip, rsync, redis, postgresql)
  apt: 
    name: 
      - smbclient
      - cifs-utils
      - unzip
      - rsync
      - redis
      - postgresql
    state: present
    install_recommends: yes
    update_cache: yes
  
- name: Create mount point
  file:
    path: "/mnt/smb_shared"
    state: directory
    mode: "0775"
          
- name: Mount SMB Share (guest)
  mount:
    src: "//10.250.232.198/shared"
    path: "/mnt/smb_shared"
    fstype: cifs
    opts: "guest,vers=3.0"
    state: mounted

- name: Copy OpenVPN deb
  copy:
    src: "/mnt/smb_shared/scripts.zip"
    dest: "/opt/scripts.zip"
    remote_src: true
    mode: "0644"

- name: Unarchive scripts
  ansible.builtin.unarchive:
    src: "/opt/scripts.zip"
    dest: "/opt/"
    remote_src: true
    extra_opts: ["-o"]

- name: Copy all scripts to "/usr/local/bin"
  copy:
    src: "/opt/Scripts/{{ item }}"
    dest: "/usr/local/bin/{{ item | regex_replace('\\.py$', '') }}"
    remote_src: true
    mode: "0755"
  loop:
    - nmap_auto.py
#    - OpnMetaTest3.py
#    - OpnMetaTest5-new.py
#    - PenTest43.py
#    - PenTestCombined6.py
    - XML2JSON.py
#    - FinalScript6.py
    - Automation_Pipeline.py

- name: Git Clone Caldera
  git:
    repo: "https://github.com/mitre/caldera.git"
    dest: /opt/caldera
    recursive: yes
    force: yes

- name: Replace Caldera requirements.txt file
  copy:
    dest: /opt/caldera/requirements.txt
    content: |
      aiohttp-jinja2==1.5.1
      aiohttp==3.10.8
      aiohttp_session==2.12.0
      aiohttp-security==0.4.0
      aiohttp-apispec==3.0.0b2
      jinja2==3.1.6
      pyyaml==6.0.1
      cryptography==44.0.1
      websockets==15.0
      Sphinx==7.1.2
      sphinx_rtd_theme==1.3.0
      myst-parser==2.0.0
      marshmallow==3.20.1
      dirhash==0.2.1
      marshmallow-enum==1.5.1
      ldap3==2.9.1
      lxml~=5.3.1  # debrief
      reportlab==4.0.4  # debrief
      rich==13.7.0
      svglib==1.5.1  # debrief
      Markdown==3.4.4  # training
      dnspython==2.4.2
      asyncssh==2.14.1
      aioftp~=0.20.0
      packaging==23.2
      croniter~=3.0.3
    owner: root
    group: root
    mode: "0644"

- name: Create Python virtual environment
  command: python3 -m venv /opt/caldera/venv
  args:
    creates: /opt/caldera/venv

- name: Install python Requiremnts
  pip:
    requirements: /opt/caldera/requirements.txt
    virtualenv: /opt/caldera/venv
    virtualenv_python: python3
    
- name: Install Python dev requiremnts
  pip:
    requirements: /opt/caldera/requirements-dev.txt
    virtualenv: /opt/caldera/venv
    virtualenv_python: python3

#- name: Run Caldera Server.py
#  command: /opt/caldera/venv/bin/python3 server.py --insecure --build
#  args: 
#    chdir: /opt/caldera/
    
- name: Create startup script
  copy:
    dest: /start-caldera.sh
    content: |
      #!/bin/bash
      echo "Activating Virtual Environment..."
      cd /opt/caldera/
      source /opt/caldera/venv/bin/activate
      echo "Starting CALDERA"
      python3 /opt/caldera/server.py --insecure --build
    mode: "0755"
    owner: root
    group: root

- name: Create caldera service 
  copy:
    dest: /etc/systemd/system/caldera.service
    content: |
      [Unit]
      Description=Caldera Service
      After=network.target

      [Service]
      ExecStart=/start-caldera.sh
      Restart=always
      User=root

      [Install]
      WantedBy=multi-user.target
    mode: "0644"

- name: Reload systemd
  command: systemctl daemon-reload

- name: Enable Caldera service
  service:
    name: caldera
    enabled: yes
    state: started

- name: Install OpenVAS (gvm-setup)
  command: gvm-setup
  register: gvm_setup_output
  ignore_errors: yes

- name: Change OpenVAS admin password
  command: sudo -u _gvm gvmd --user=admin --new-password=admin

- name: Install OpenVAS (gvm-setup)
  command: greenbone-feed-sync
  register: gvm_feed_sync_output
  ignore_errors: yes

- name: Run gvm-check-setup to verify
  command: gvm-check-setup
  ignore_errors: yes

- name: Start OpenVAS service
  command: gvm-start
  ignore_errors: yes

- name: Metasploit Install Python packages for automation
  pip:
    name: 
      - pymetasploit3
      - python-gvm
    executable: /opt/caldera/venv/bin/pip3

- name: Ensure PostgreSQL service is running and enabled
  systemd:
    name: postgresql
    state: started
    enabled: yes
    
- name: Initialize Metasploit Database
  command: msfdb init
  args:
    creates: /usr/share/metasploit-framework/config/database.yml

- name: Ensure Python DB driver is installed (Debian/Ubuntu)
  apt:
    name: python3-psycopg2
    state: present
  become: yes
  when: ansible_facts['os_family'] == 'Debian'

- name: Ensure community.postgresql collection is available (run locally beforehand)
  ansible.builtin.debug:
    msg: "Make sure you ran: ansible-galaxy collection install community.postgresql"
  changed_when: false

- name: Ensure PostgreSQL user 'msf' exists with password
  become: yes
  become_user: postgres
  postgresql_user:
    name: msf
    password: "msfpassword"
    role_attr_flags: LOGIN
    expires: infinity
    state: present
    
- name: Create .msf4 directory
  file:
    path: "{{ ansible_env.HOME }}/.msf4"
    state: directory
    mode: '0755'

- name: Create Metasploit database.yml
  copy:
    dest: "{{ ansible_env.HOME }}/.msf4/database.yml"
    content: |
      development: &pgsql
        adapter: postgresql
        database: msf
        username: msf
        password: msfpassword
        host: localhost
        port: 5432
        pool: 5
        timeout: 5
      test:
        <<: *pgsql
        database: msf_test
        production:
        <<: *pgsql

#- name: Copy database.yml to global Metasploit config
#  copy:
#    src: "{{ ansible_env.HOME }}/.msf4/database.yml"
#    dest: /usr/share/metasploit-framework/config/database.yml
#    remote_src: true
#    owner: root
#    group: root
#    mode: "0644"

- name: Start msfrpcd for Metasploit RPC
  command: msfrpcd -P "msfpassword" -n -a 127.0.0.1 -p 55553
